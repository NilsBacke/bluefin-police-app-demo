{"version":3,"sources":["search/index.js","App.js","serviceWorker.js","index.js"],"names":["filterSearchResults","results","MAX_DELTA","length","score1","score2","i","score","delta","Math","abs","splice","laws","require","fuse","Fuse","includeScore","isCaseSensitive","keys","App","state","text","maxDelta","event","this","setState","target","value","search","Number","map","res","r","item","style","marginVertical","Chapter","Section","Desc","round","margin","marginBottom","type","onChange","handleChange","bind","width","marginLeft","handleDeltaChange","onClick","renderResults","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gwkEAAO,SAASA,EAAoBC,GAA4B,IAAnBC,EAAkB,uDAAN,IACvD,GAAuB,IAAnBD,EAAQE,OACV,OAAOF,EAKT,IAFA,IAAIG,EAAS,EACTC,EAAS,EACJC,EAAI,EAAGA,EAAIL,EAAQE,OAAQG,IAAK,CACvCF,EAASH,EAAQ,GAAGM,MACpBF,EAASJ,EAAQK,GAAGC,MACpB,IAAIC,EAAQC,KAAKC,IAAIN,EAASC,GAE1BG,EAAQN,IACVD,EAAQU,OAAOL,GACfA,KAIJ,OAAOL,E,WCdHW,EAAOC,EAAQ,IASfC,EAAO,IAAIC,IAAKH,EAPN,CACdI,cAAc,EACdC,iBAAiB,EAEjBC,KAAM,CAAC,UA+DMC,E,4MAxDbC,MAAQ,CACNC,KAAM,GACNC,SAAU,OACVrB,QAAS,I,2DAGEsB,GACXC,KAAKC,SAAS,CAAEJ,KAAME,EAAMG,OAAOC,U,wCAGnBJ,GAChBC,KAAKC,SAAS,CAAEH,SAAUC,EAAMG,OAAOC,U,+BAIvC,IAAM1B,EAAUa,EAAKc,OAAOJ,KAAKJ,MAAMC,MACvCG,KAAKC,SAAS,CAAExB,QAASD,EAAoBC,EAAS4B,OAAOL,KAAKJ,MAAME,e,sCAIxE,OAAOE,KAAKJ,MAAMnB,QAAQ6B,KAAI,SAACC,EAAKzB,GAClC,IAAM0B,EAAID,EAAIE,KACd,OAAO,yBAAKC,MAAO,CAAEC,eAAgB,KACnC,4BAAKH,EAAEI,QAAP,IAAiBJ,EAAEK,QAAnB,IAA6BL,EAAEM,MAC/B,uCAAaN,EAAE,YACf,uCAAaA,EAAE,YACf,uCAAaA,EAAE,YACf,6CAAmBvB,KAAK8B,MAAwB,KAAjB,EAAIR,EAAIxB,OAAe,KAAO,IAA7D,W,+BAMJ,OACE,yBAAK2B,MAAO,CAAEM,OAAQ,KACpB,yBAAKN,MAAO,CAAEO,aAAc,KAC1B,6CACc,IACZ,2BAAOC,KAAK,OAAOf,MAAOH,KAAKJ,MAAMC,KAAMsB,SAAUnB,KAAKoB,aAAaC,KAAKrB,MAAOU,MAAO,CAAEY,MAAO,QAErG,2BAAOZ,MAAO,CAAEa,WAAY,KAA5B,iCACiC,IAC/B,2BAAOL,KAAK,OAAOf,MAAOH,KAAKJ,MAAME,SAAUqB,SAAUnB,KAAKwB,kBAAkBH,KAAKrB,SAEvF,4BAAQU,MAAO,CAAEa,WAAY,IAAME,QAASzB,KAAKI,OAAOiB,KAAKrB,OAA7D,WAIF,6BACGA,KAAK0B,sB,GAnDEC,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.94e3bec5.chunk.js","sourcesContent":["export function filterSearchResults(results, MAX_DELTA = 0.25) {\n  if (results.length === 0) {\n    return results;\n  }\n\n  var score1 = 0;\n  var score2 = 0;\n  for (var i = 1; i < results.length; i++) {\n    score1 = results[0].score;\n    score2 = results[i].score;\n    let delta = Math.abs(score1 - score2);\n\n    if (delta > MAX_DELTA) {\n      results.splice(i);\n      i--;\n    }\n  }\n\n  return results;\n}\n","import React from 'react';\nimport './App.css';\nimport { filterSearchResults } from './search'\nimport Fuse from 'fuse.js'\nconst laws = require('./search/laws.json')\n\nconst options = {\n  includeScore: true,\n  isCaseSensitive: false,\n  // threshold: 0.5,\n  keys: ['Desc'],\n}\n\nconst fuse = new Fuse(laws, options)\n\nclass App extends React.Component {\n\n  state = {\n    text: '',\n    maxDelta: '0.25',\n    results: [],\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  handleDeltaChange(event) {\n    this.setState({ maxDelta: event.target.value });\n  }\n\n  search() {\n    const results = fuse.search(this.state.text)\n    this.setState({ results: filterSearchResults(results, Number(this.state.maxDelta)) })\n  }\n\n  renderResults() {\n    return this.state.results.map((res, i) => {\n      const r = res.item;\n      return <div style={{ marginVertical: 16 }}>\n        <h4>{r.Chapter}:{r.Section} {r.Desc}</h4>\n        <p>1st Off: {r[\"1ST Of.\"]}</p>\n        <p>2nd Off: {r[\"2ND Of.\"]}</p>\n        <p>3rd Off: {r[\"3RD Of.\"]}</p>\n        <p>Percent Match: {Math.round((1 - res.score) * 100 * 100) / 100}%</p>\n      </div>\n    })\n  }\n\n  render() {\n    return (\n      <div style={{ margin: 24 }}>\n        <div style={{ marginBottom: 16 }}>\n          <label>\n            Query Text:{' '}\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange.bind(this)} style={{ width: 300 }} />\n          </label>\n          <label style={{ marginLeft: 16 }}>\n            Maximum Delta between results:{' '}\n            <input type=\"text\" value={this.state.maxDelta} onChange={this.handleDeltaChange.bind(this)} />\n          </label>\n          <button style={{ marginLeft: 16 }} onClick={this.search.bind(this)}>\n            Search\n          </button>\n        </div>\n        <div>\n          {this.renderResults()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}